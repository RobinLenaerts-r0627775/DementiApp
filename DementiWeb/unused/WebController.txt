 /* Old controller before rework.

    private void refreshPatientRepo() {
        if (patientApiAddress!=null){
            try {
                RestTemplate restTemplate = new RestTemplate();
                Patient[] response = restTemplate.getForObject(patientApiAddress,Patient[].class);
                for (Patient p : response) {
                    patientRepository.save(p);
                    loginRepository.add(LoginInfo.LoginInfomaker(p.firstName + "." + p.lastName, p.password, p.patientId));
                }
            } catch (Exception e) {
                throw new IllegalArgumentException("Something went wrong with sending data: " + e.getMessage());
            }
        } else {
            throw new IllegalArgumentException("No api address for patients configured");
        }
        if (mediaApiAddress!=null){
            try {
                RestTemplate restTemplate = new RestTemplate();
                MediaFile[] response = restTemplate.getForObject(mediaApiAddress,MediaFile[].class);
                for (MediaFile p : response) {
                    mediaRepository.save(p);
                }
            } catch (Exception e) {
                throw new IllegalArgumentException("Something went wrong with sending data: " + e.getMessage());
            }
        } else {
            throw new IllegalArgumentException("No api address for media configured");
        }
    }

    private Patient postPatient(Patient patient) {
        Patient result = null;
        if (patientApiAddress != null){
            try {
                RestTemplate restTemplate = new RestTemplate();
                ResponseEntity<Patient> response = restTemplate.postForEntity(patientApiAddress, patient, Patient.class);
                refreshPatientRepo();
                Optional<Patient> op = patientRepository.findById(response.getBody().getPatientId()); //Onnodig but Just to be sure
                if (op.isPresent()){
                    result = op.get();
                }
            } catch (Exception e) {
                throw new IllegalArgumentException("Something went wrong with sending data: " + e.getMessage());
            }
        } else {
            throw new IllegalArgumentException("No api addres configured");
        }
        return result;
    }

    private MediaFile postMediaFile(MultipartFile file, UUID patientId, String description, String category) {
        MediaFile result = null;
        String extension = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf('.'));
        FileUploadObject data = null;
        try {
            data = new FileUploadObject(file.getBytes(), patientId, extension, description, category);
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (mediaApiAddress != null){
            try {
                RestTemplate restTemplate = new RestTemplate();
                ResponseEntity<MediaFile> response = restTemplate.postForEntity(mediaApiAddress + "/file", data, MediaFile.class);
                refreshPatientRepo();
                Optional<MediaFile> op = mediaRepository.findById(response.getBody().getMediaId()); //Onnodig but Just to be sure
                if (op.isPresent()) {
                    result = op.get();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                throw new IllegalArgumentException("Something went wrong with sending data: " + e.getMessage());
            }
        } else {
            throw new IllegalArgumentException("No api addres configured");
        }
        return result;
    }

    @RequestMapping("/login")
    public void loginpage(Model model, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if(request.getSession(false) != null){
            logout(model, request, response);
        }
        else {
            RequestDispatcher requestDispatcher= request.getRequestDispatcher("/toLogin");
            requestDispatcher.forward(request, response);
        }
    }

    @RequestMapping("/toLogin")
    public String toLogin(Model model, HttpServletRequest request, HttpServletResponse response){
        return loginpage;
    }



    @RequestMapping("/profile")
    public void profile(Model model, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        for(Patient pat : patientRepository.findAll()){
            System.out.println(pat.patientId.toString());
        }
        if( request.getCookies().length != 0){
            for(Cookie c : request.getCookies()){
                System.out.println("============================== \n "+ c.getName() + " = " + c.getValue() + "\n ==============================");
                if(c.getName().equals("patientid")){
                    model.addAttribute("patient", patientRepository.findById(UUID.fromString(c.getValue())).get());
                    greeting(model, request, response);
                }
            }
        }
        else {
            loginpage(model, request, response);
        }
    }


    @RequestMapping("/") //TODO
    public void index(Model model,HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {getAllPatientsPage(model, request, response);}

    @PostMapping("/addPhotos/{patientId}") //TODO
    public String addPhotos(@PathVariable UUID patientId, @RequestParam("files") MultipartFile[] files, @RequestParam("description") String description, @RequestParam("category") String category, Model model){
        for (MultipartFile file : files){
            MediaFile mf = postMediaFile(file, patientId, description, category);
        }

        model.addAttribute("patientId", patientId);
        if (mediaApiAddress!=null){
            try {
                RestTemplate restTemplate = new RestTemplate();
                MediaFile[] result = restTemplate.getForObject(mediaApiAddress + "/" + patientId ,MediaFile[].class);
                model.addAttribute("photoAlbum", result);
            } catch (Exception e) {
                throw new IllegalArgumentException("Something went wrong with gathering media data", e);
            }
        } else {
            throw new IllegalArgumentException("No api address for media configured");
        }
        return album; //TODO add albumphotos to model
    }

    @PostMapping("/setProfilePicture/{patientId}") //TODO
    public String setProfilePicture(@PathVariable UUID patientId, @RequestParam("files") MultipartFile file, @RequestParam("description") String description, @RequestParam("category") String category, Model model){
        refreshPatientRepo();
        Optional<Patient> op = patientRepository.findById(patientId);
        if (op.isPresent()){
            MediaFile mediaFile = postMediaFile(file, patientId, description, category);
            Patient patient = op.get();
            patient.setProfile(mediaFile.mediaId);
            patient = postPatient(patient);
            model.addAttribute("patient", patient);
            return greeting;
        }
        return index;//Fout
    }

    @GetMapping("/media/{patientId}")
    public String getPhotos(@PathVariable UUID patientId, Model model){
        model.addAttribute("patientId", patientId);
        if (mediaApiAddress!=null){
            try {
                RestTemplate restTemplate = new RestTemplate();
                MediaFile[] result = restTemplate.getForObject(mediaApiAddress + "/" + patientId ,MediaFile[].class);
                model.addAttribute("photoAlbum", result);
            } catch (Exception e) {
                throw new IllegalArgumentException("Something went wrong with gathering media data", e);
            }
        } else {
            throw new IllegalArgumentException("No api address for media configured");
        }
        return album;
    }

    @GetMapping("/person/{patientId}")
    public String greeting(Model model, HttpServletRequest request, HttpServletResponse response) {
        //refreshPatientRepo();
        UUID patientId = null;
        for(Cookie c : request.getCookies()){
            if( c.getName().equals("patientid")){
                patientId = UUID.fromString(c.getValue());
            }
        }
        Optional<Patient> op = patientRepository.findById(patientId);
        if (op.isPresent()){
            model.addAttribute("patient", op.get());
            return greeting;
        }
        return index; //Fout
    }

    @GetMapping("/patients")
    public void getAllPatientsPage(Model model,HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        refreshPatientRepo();
        model.addAttribute("patients", patientRepository.findAll());
        RequestDispatcher dd=request.getRequestDispatcher(all);
        dd.forward(request, response);
    }

    @GetMapping("/patients/{patientId}")
    public String getPatient (@PathVariable UUID patientId, Model model){
        refreshPatientRepo();
        Optional<Patient> op = patientRepository.findById(patientId);
        if (op.isPresent())
        {
            model.addAttribute("patient", op.get());
            return form;
        }

        else return all;
    }


    @PostMapping(value = "/patients")
    public String postPatient(@RequestBody Patient patient, Model model){
        /*if (patient.profilePicture == null) {
            patient.setProfile(null); //TODO
        }
        if (patientApiAddress!=null){
            try {
                RestTemplate restTemplate = new RestTemplate();
                ResponseEntity<Patient> response = restTemplate.postForEntity(patientApiAddress, patient, Patient.class);
            } catch (Exception e) {
                throw new IllegalArgumentException("Something went wrong with sending data", e);
            }
        } else {
            throw new IllegalArgumentException("No api addres configured");
        }
        refreshPatientRepo();
        return all;
    }

}*/